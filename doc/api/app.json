{
  "type": "App",
  "category": "service",
  "object": "app",
  "extends": "NativeObject",
  "description": "Provides information about the application and allows to handle global application ui events.",
  "constructor": {
    "access": "private",
    "parameters": []
  },
  "properties": {
    "jsxAttributes": {
      "type": "never",
      "ts_only": true,
      "const": true,
      "readonly": true
    },
    "id": {
      "type": "string",
      "readonly": true,
      "const": true,
      "description": "Uniquely identifies the app."
    },
    "debugBuild": {
      "type": "boolean",
      "const": true,
      "readonly": true,
      "description": "Returns `false` if this app was build build in production mode, otherwise `true`. In production mode no debugger can be attached to the JavaScript VM or native runtime."
    },
    "version": {
      "type": "string",
      "const": true,
      "readonly": true,
      "description": "The user facing version number of the app."
    },
    "versionCode": {
      "type": "number",
      "const": true,
      "readonly": true,
      "description": "An alternative version number used in app stores to identify different versions of an app. Usually incremented with each release. This property reflects the `versionCode` on Android and `CFBundleVersion` on iOS."
    },
    "pinnedCertificates": {
      "type": {
        "interface": "Array",
        "generics": [
          "any"
        ]
      },
      "description": "Enables certificate pinning for HTTP requests. When pinned certificates are defined for a host, connections to this host will only be permitted if the server provides a matching certificate. Connections to hosts that are not in the list are not affected.\n\nCertificate pinning affects the following components: XHR/fetch, WebSockets and image loading. It does *not* affect WebViews.\n\nThe list of pinned certificates has to be in the form of `[{host: <string>, hash: <string>, algorithm: <RSA2048|RSA4096|ECDSA256>}, ..]`.\n\n- The `host` attribute denotes the host name (including subdomain) of the host to be pinned ([wildcards allowed](https://en.wikipedia.org/wiki/Wildcard_DNS_record)).\n- The `hash` attribute is the base64 encoded sha256 fingerprint of the _subjectPublicKeyInfo_, prefixed with `sha256/`.\n- The `algorithm` attribute denotes the public key algorithm of the SSL certificate and can have the values `RSA2048`, `RSA4096` or `ECDSA256`. This attribute is only required on iOS.\n\nExample: `[{host: 'freegeoip.net', hash: 'sha256/+SVYjThgePRQxQ0e8bWTQDRtPYR/xBRufqyMoeaWteo=', algorithm: 'ECDSA256'}]`\n\nFor further details see https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning."
    },
    "trustedCertificates": {
      "type": {
        "interface": "Array",
        "generics": [
          "ArrayBuffer"
        ]
      },
      "description": "Adds a set of certificates to validated ssl connections against. The certificates are applied in addition to the system wide default certificates.\n\nThe `ArrayBuffer` entries of the `trustedCertificates` array consist of the bytes of the certificate files. On Android the certificate file has to be a _*.pem_ (Privacy Enhanced Mail) file whereas on iOS  it has to be _*.der_ (Distinguished Encoding Rules) file."
    },
    "idleTimeoutEnabled": {
      "type": "boolean",
      "default": true,
      "description": "Allows to control the device idle timout. When disabled the device will not go into sleep mode and turn off the screen to safe battery power.\n\nThe `idleTimeoutEnabled` will disable any system wide enabled idle settings while the app is in the foreground."
    }
  },
  "events": {
    "foreground": {
      "description": "The event is fired when the app starts or when it returns from the background."
    },
    "resume": {
      "description": "Fired when the app is visible and ready to interact with the user. The event is preceded by either `foreground` (the app becomes visible again) or `pause` (the app regains ability to interact with user)."
    },
    "pause": {
      "description": "Fired when the app is not the interaction target of the user anymore. Usually preceded by `resume`."
    },
    "background": {
      "description": "Fired when the app becomes invisible. Either because another app is in the foreground or the user has returned to the home screen."
    },
    "terminate": {
      "description": "Fired when the app is being destroyed. After this callback no more interaction with the app is possible.\n\n On Android the terminate event is fired when closing the app via the back navigation or when the system shuts down the app to reclaim memory. In case the app is hard killed by eg. clearing it from the app switcher, the event is not fired.\n\n On iOS the event might not always be fired reliably due to the scheduling behavior of the underlying operating system.\n\nIt is therefore recommended to use the event to clean up resources but not to rely on it for mission critical operations."
    },
    "keyPress": {
      "description": "Fired when a hardware key is pressed. Note that these events stem from physical hardware, not from the virtual keyboard.\n\nWhen invoking `event.preventDefault()` the key event is not propagated to the widget hierarchy. However, a `TextInput` with focus will still receive the key event.",
      "parameters": {
        "keyCode": {
          "description": "The key code of the key event. It represents the physical key that was pressed, not the Unicode character.",
          "type": "number"
        },
        "character": {
          "description": "The character generated by the specified key and modifier key state combination.",
          "type": "string"
        },
        "shiftKey": {
          "description": "The pressed state of the SHIFT key.",
          "type": "boolean"
        },
        "ctrlKey": {
          "description": "The pressed state of the CTRL key.",
          "type": "boolean"
        },
        "altKey": {
          "description": "The pressed state of the ALT key.",
          "type": "boolean"
        },
        "functionKey": {
          "description": "The pressed state of the FUNCTION key.",
          "type": "boolean"
        },
        "action": {
          "description": "The action of this key event.",
          "type": {
            "union": [
              "'up'",
              "'down'"
            ]
          }
        },
        "time": {
          "description": "The time this event occurred, in the android.os.SystemClock#uptimeMillis time base.",
          "type": "number"
        },
        "deviceId": {
          "description": "The id for the device that this event came from. An id of zero indicates that the event didn't come from a physical device and maps to the default keymap. The other numbers are arbitrary and you shouldn't depend on the values.",
          "type": "number"
        },
        "preventDefault": {
          "description": "Call to suppress the key events to be dispatched to the apps widget hierarchy. Note that a `TextInput` with focus will still receive the event and add a character to its text accordingly.",
          "type": "Function",
          "ts_type": "() => void"
        }
      },
      "platforms": {
        "ios": false
      }
    },
    "backNavigation": {
      "description": "Fired when a back navigation is invoked by the user.",
      "parameters": {
        "preventDefault": {
          "description": "Call to suppress the default back navigation behavior.",
          "type": "Function",
          "ts_type": "() => void"
        }
      },
      "platforms": {
        "ios": false
      }
    },
    "continueWebActivity": {
      "description": "Fired when the app is launched via a universal link (iOS) or app link (Android). This event allows the app to handle universal/app links opened in another app.",
      "parameters": {
        "webpageURL": {
          "description": "The URL that was used to launch or resume the app, including path and query parameters.",
          "type": "string"
        }
      }
    }
  },
  "methods": {
    "launch": {
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "description": "The URL to launch."
        }
      ],
      "returns": "Promise",
      "ts_returns": "Promise<void>",
      "description": "Asks the operating system to open the given URL in an external app. Operating systems usually support a variety of URL schemes including `http`, `https`, `mailto`, `tel`, and `sms`. Apps can also register for custom URL schemes."
    },
    "share": {
      "parameters": [
        {
          "name": "data",
          "type": {
            "map": {
              "title": {
                "type": "string",
                "description": "Text to show in the share dialog.",
                "optional": true
              },
              "text": {
                "type": "string",
                "description": "A piece of text to share with another app.",
                "optional": true
              },
              "url": {
                "type": "string",
                "description": "A url to share with another app.",
                "optional": true
              },
              "files": {
                "type": {
                  "interface": "Array",
                  "generics": [
                    "File"
                  ]
                },
                "description": "An array of `File` objects to share with another app.",
                "optional": true
              }
            }
          },
          "description": "The data to share. The object must contain at least one of the properties: `title`, `text`, `url` or `files`. The files need to have a `name` and mime `type` set. <br/><br/>On iOS the content of the `url` is previewed in the native share dialog. On Android it is treated as regular text. When both `text` and `url` are given on Android the two strings are concatenated with a blank space as defined in the [W3C Web Share API](https://www.w3.org/TR/web-share/)."
        }
      ],
      "returns": {
        "interface": "Promise",
        "generics": [
          "string"
        ]
      },
      "description": "Asks the operating system to share data with another installed app. The returned promise resolves successfully when the data was shared with another app. The resolved promise contains a string providing platform specific information about the share target. In case sharing was not possible or the share operation has been canceled by the user, the promise is rejected with an appropriate error message.\n\nThe behavior of this API follows the [W3C Web Share API](https://www.w3.org/TR/web-share/).\n\nIn order to be able to share an image to the photo app on iOS, the Tabris.js app has to include the text string `NSPhotoLibraryAddUsageDescription` in its plist file. The string is used in the native permission dialog. See the [`'camera' permissions`](../permissions.md#category-camera) docs for examples on how to configure the string."
    },
    "reload": {
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": true,
          "description": "An optional url to an app to launch"
        }
      ],
      "description": "Closes the running application and either loads a different app at the given `url` or reloads the current app when no `url` is given."
    },
    "close": {
      "parameters": [],
      "description": "Shuts down the running application and closes the UI.",
      "platforms": {
        "ios": false
      }
    },
    "getResourceLocation": {
      "parameters": [
        {
          "name": "path",
          "type": "string",
          "description": "The path of a resource relative to the application root."
        }
      ],
      "returns": "string",
      "description": "Returns the URL for a given resource that is bundled with the app. Can be used to access app resources like images, videos, etc. Note that these resources can only be accessed in read-only mode."
    },
    "registerFont": {
      "parameters": [
        {
          "name": "alias",
          "type": "string",
          "description": "An identifier for the registered font. The alias can be used as a font family, e.g. in the `font` properties of `TextView` and `Button`."
        },
        {
          "name": "file",
          "type": "string",
          "description": "The font file to register for later use. Similar to images paths, the file path can be absolute, relative or an URL."
        }
      ],
      "description": "Allows to register a font to use throughout the app. Once a font is registered its alias can be used to apply the font where ever a font can be configured, e.g. in `TextView` or `GraphicalContext`. Tabris.js supports TrueType fonts (*.ttf) and OpenType fonts (*.otf)."
    }
  },
  "links": [
    {
      "title": "Displaying app properties",
      "snippet": "app-info.jsx"
    },
    {
      "title": "Displaying app events",
      "snippet": "app-events.jsx"
    },
    {
      "title": "Launching an url",
      "snippet": "app-launch.jsx"
    },
    {
      "title": "Register and use an external font",
      "snippet": "textview-font-external.js"
    },
    {
      "title": "Share various types of data with the `share()` API",
      "snippet": "app-share.jsx"
    }
  ]
}
